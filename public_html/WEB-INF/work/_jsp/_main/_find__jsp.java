/*
 * JSP generated by Resin-3.1.15 (built Mon, 13 Oct 2014 06:45:33 PDT)
 */

package _jsp._main;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.util.*;
import java.io.*;
import dao.*;
import malgnsoft.db.*;
import malgnsoft.util.*;

public class _find__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/html; charset=utf-8");
    request.setCharacterEncoding("UTF-8");
    try {
      

//\uac1d\uccb4
Malgn m = new Malgn(request, response, out);
SessionDao mSession = new SessionDao(request, response);

Form f = new Form("form1");
try { f.setRequest(request); }
catch(Exception ex) { out.print("Overflow file size. - " + ex.getMessage()); return; }

Page p = new Page();
p.setRequest(request);
p.setPageContext(pageContext);
p.setWriter(out);

//\ubcc0\uc218
int userId = 0;
String loginId = "";
String userName = "";
String userEmail = "";
String userType = "";
String sysToday = m.time("yyyyMMdd");
String sysNow = m.time("yyyyMMddHHmmss");
String userSessionId = null;
boolean loginBlock = false;

//\ub85c\uadf8\uc778 \uc5ec\ubd80 \uccb4\ud06c
Auth auth = new Auth(request, response);
auth.loginURL = "/main/login.jsp";
auth.keyName = "gidon";

if(auth.isValid()) {
    userId = auth.getInt("ID");
    loginId = auth.getString("LOGINID");
    userName = auth.getString("USERNAME");
    userEmail = auth.getString("EMAIL");
    userType = auth.getString("TYPE");

    userSessionId = auth.getString("SESSIONID");
}

p.setVar("SYS_LOGINID", loginId);
p.setVar("SYS_USERNAME", userName);
p.setVar("SYS_USEREMAIL", userEmail);
p.setVar("SYS_USERKIND", userType);
p.setVar("SYS_TODAY", sysToday);
p.setVar("SYS_NOW", sysNow);


      

String ch = "main";


      

//\uac1d\uccb4
UserDao user = new UserDao();
MailDao mail = new MailDao();

String mode = m.rs("mode");
String lid = f.get("login_id");
String name = f.get("user_nm");
String email = f.get("email1") + "@" + f.get("email2");

//\ucc98\ub9ac
if(m.isPost()) {

    if("email_authno".equals(mode)) {

        //\uc815\ubcf4
        DataSet uinfo = user.find("user_nm = ? AND login_id = ? AND email = ? ", new Object[]{name, lid, email});
        if (!uinfo.next()) {
            m.jsAlert("\ud68c\uc6d0\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.");
            return;
        }

        //\ubc1c\uc1a1
        String authNo = "" + m.getRandInt(12345, 864198);
        mail.send(email, authNo);

        //\uc138\uc158
        m.setSession("LOGIN_ID", lid);
        m.setSession("EMAIL", email);
        m.setSession("USER_ID", uinfo.s("user_id"));
        m.setSession("AUTH_NO", authNo);
        m.setSession("EMAIL_SENDDATE", sysNow);

        m.jsAlert("\uc784\uc2dc\ube44\ubc00\ubc88\ud638\uac00 \ubc1c\uae09\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uba54\uc77c\uc744 \ud655\uc778\ud558\uc138\uc694");

        m.jsAlert(m.getSession("AUTH_NO"));
    } else if("email_check".equals(mode)) {

        //\uba54\uc77c
        if (!f.get("auth_no").equals(m.getSession("AUTH_NO"))) {
            m.jsAlert(m.getSession("AUTH_NO"));
            m.jsAlert("\uc778\uc99d\ubc88\ud638\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.11"); return;
        } else {

            String newPasswd = Malgn.getUniqId();

            user.item("passwd", Malgn.encrypt(newPasswd, "SHA-256"));
            if (!user.update("id = '" + name + "'")) {
                m.jsAlert("\ube44\ubc00\ubc88\ud638 \ubcc0\uacbd \uc911 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc2b5\ub2c8\ub2e4.");
            } else {

                mail.send(email, newPasswd);
                //\uc138\uc158
                m.setSession("LOGIN_ID", "");
                m.setSession("EMAIL", "");
                m.setSession("USER_ID", "");
                m.setSession("AUTH_NO", "");
                m.setSession("EMAIL_SENDDATE", "");

                m.jsAlert("\uc0c8\ub85c\uc6b4 \ube44\ubc00\ubc88\ud638\ub97c \uc774\uba54\uc77c\ub85c \ubc1c\uc1a1\ub4dc\ub838\uc2b5\ub2c8\ub2e4. \ud655\uc778\ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4.");
                m.redirect("login.jsp");
            }
        }
    }
}
//\ucd9c\ub825
p.setLayout("blank");
p.setBody("main.find");
p.setVar("query", m.qs());

p.display();


    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 6749855747778707107L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("main/find.jsp"), -1576935868245253805L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("main/init.jsp"), 276997249777252625L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("init.jsp"), 7685309690132995048L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }
}
